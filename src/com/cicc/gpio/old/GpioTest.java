package com.cicc.gpio.old;

import java.io.IOException;
import java.util.Calendar;

import com.cicc.gpio.Button;
import com.cicc.gpio.ButtonListener;
import com.cicc.gpio.ButtonPressedObserver;
import com.cicc.gpio.Color;
import com.cicc.gpio.LCDFactory;
import com.cicc.gpio.MockupLCD;

public class GpioTest {

	public static final byte[][] num0 = { { 0x3, 0x7, 0xc, 0x18, 0x18, 0x18, 0x18, 0x18 }, { 0x18, 0x1c, 0x6, 0x3, 0x3, 0x3, 0x3, 0x3 }, { 0x18, 0x18, 0x18, 0x18, 0x18, 0xc, 0x7, 0x3 }, { 0x3, 0x3, 0x3, 0x3, 0x3, 0x6, 0x1c, 0x18 } };
	public static final byte[][] num1 = { { 0x1, 0x3, 0x7, 0xd, 0x9, 0x1, 0x1, 0x1 }, { 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 }, { 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xf, 0xf }, { 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1f, 0x1f } };
	public static final byte[][] num2 = { { 0x3, 0x7, 0xc, 0x18, 0x18, 0x0, 0x0, 0x0 }, { 0x1c, 0x1c, 0x6, 0x3, 0x3, 0x3, 0x6, 0xc }, { 0x0, 0x1, 0x3, 0x6, 0xc, 0x18, 0x1f, 0x1f }, { 0x18, 0x10, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x1f } };
	public static final byte[][] num3 = { { 0x3, 0x7, 0xc, 0x18, 0x18, 0x0, 0x0, 0x1 }, { 0x18, 0x1c, 0x6, 0x3, 0x3, 0x3, 0x6, 0x1c }, { 0x1, 0x0, 0x0, 0x18, 0x18, 0xc, 0x7, 0x3 }, { 0x1c, 0x6, 0x3, 0x3, 0x3, 0x6, 0x1c, 0x18 } };
	public static final byte[][] num4 = { { 0x0, 0x0, 0x1, 0x3, 0x6, 0xc, 0x18, 0x18 }, { 0xc, 0x1c, 0x1c, 0xc, 0xc, 0xc, 0xc, 0xc }, { 0x1f, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0x1f, 0x1f, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc } };
	public static final byte[][] num5 = { { 0x1f, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x1b, 0x1f }, { 0x1f, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x18, 0x1c }, { 0x1c, 0x0, 0x0, 0x18, 0x18, 0x1c, 0xf, 0x7 }, { 0x6, 0x3, 0x3, 0x3, 0x3, 0x6, 0x1c, 0x18 } };
	public static final byte[][] num6 = { { 0x3, 0x7, 0xc, 0x18, 0x18, 0x18, 0x18, 0x1b }, { 0x18, 0x1c, 0x6, 0x3, 0x1, 0x0, 0x0, 0x18 }, { 0x1f, 0x1c, 0x18, 0x18, 0x18, 0xc, 0x7, 0x3 }, { 0x1e, 0x6, 0x3, 0x3, 0x3, 0x6, 0x1c, 0x18 } };
	public static final byte[][] num7 = { { 0x1f, 0x1f, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0x1f, 0x1f, 0x3, 0x6, 0x6, 0xc, 0xc, 0x18 }, { 0x0, 0x1, 0x1, 0x3, 0x3, 0x6, 0x6, 0x6 }, { 0x18, 0x10, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0 } };
	public static final byte[][] num8 = { { 0x3, 0x7, 0xc, 0x18, 0x18, 0x18, 0xc, 0x7 }, { 0x18, 0x1c, 0x6, 0x3, 0x3, 0x3, 0x6, 0x1c }, { 0x7, 0xc, 0x18, 0x18, 0x18, 0xc, 0x7, 0x3 }, { 0x1c, 0x6, 0x3, 0x3, 0x3, 0x6, 0x1c, 0x18 } };
	public static final byte[][] num9 = { { 0x3, 0x7, 0xc, 0x18, 0x18, 0x18, 0x18, 0x1c }, { 0x18, 0x1c, 0x6, 0x3, 0x3, 0x3, 0x3, 0x7 }, { 0xf, 0x3, 0x0, 0x18, 0x18, 0xc, 0x7, 0x3 }, { 0x1f, 0x1b, 0x3, 0x3, 0x3, 0x6, 0x1c, 0x18 } };
	public static final byte[] colon = { 0x0, 0x0, 0x0, 0xe, 0xe, 0xe, 0x0, 0x0 };
	public static final byte[][][] numbers = { num0, num1, num2, num3, num4, num5, num6, num7, num8, num9 };

	private static final byte[] code = { 3, 3, 2, 2, 4, 1, 4, 1 };

	private static boolean showClock = false;
	private static MockupLCD lcd;

	public static void main(String args[]) {
		try {
			lcd = (MockupLCD) LCDFactory.createLCD(true);
			lcd.setCursorEnabled(false);
			lcd.setBacklight(Color.RED);
			lcd.write("Hello Ryan");
			Thread.sleep(2000);
			clock();
			ButtonPressedObserver obs = new ButtonPressedObserver(lcd);
			obs.addButtonListener(new ButtonListener() {
				
				@Override
				public void onButtonPressed(Button button) {
					if(button == Button.SELECT){
						System.out.println("Select pressed");
					}
				}
			});
//			hideClock();
//			lcd.setBacklight(Lcd.BACKLIGHT_OFF);
//			lcd.clear();
		} catch (Throwable e) {
			e.printStackTrace();
		}
	}

	public static void hideClock() {
		showClock = false;
		try {
			Thread.sleep(1500);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		lcd.clear();
	}

	public static void clock() {
		Thread clock = new Thread(new Runnable() {

			@Override
			public void run() {
				showClock = true;
				lcd.clear();
				while (showClock) {
					Calendar cal = Calendar.getInstance();
					int hour = cal.get(Calendar.HOUR);
					if(hour == 0)
						hour = 12;
					int minute = cal.get(Calendar.MINUTE);
					int second = cal.get(Calendar.SECOND);
					int month = cal.get(Calendar.MONTH) + 1;
					int day = cal.get(Calendar.DAY_OF_MONTH);
					int year = cal.get(Calendar.YEAR);
					String time = (hour < 10 ? "0" : "") + hour + ":" + (minute < 10 ? "0" : "") + minute + ":" + (second < 10 ? "0" : "") + second;
					String date = (month < 10 ? "0" : "") + month + "/" + (day < 10 ? "0" : "") + day + "/" + year;
//					try {
						lcd.setCursorPosition(0, (16 - time.length()) / 2);
						lcd.write(time);
						lcd.setCursorPosition(1, (16 - date.length()) / 2);
						lcd.write(date);
//					} catch (IOException e1) {
//						e1.printStackTrace();
//					}
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					
					if (cal.get(Calendar.HOUR_OF_DAY) > 22 || cal.get(Calendar.HOUR_OF_DAY) < 6)
						lcd.setBacklight(Color.OFF);
					else
						lcd.setBacklight(Color.RED);
				}
			}
		}, "Clock");
		clock.start();
	}

}
